/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.jw.service.gui;

import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.persistence.EntityManager;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import org.jdesktop.observablecollections.ObservableList;
import org.jw.service.action.DefaultCloseAction;
import org.jw.service.action.DefaultContactPrintAction;
import org.jw.service.action.DefaultDeleteAction;
import org.jw.service.action.DefaultFileChooserAction;
import org.jw.service.action.DefaultNewAction;
import org.jw.service.action.DefaultOpenAction;
import org.jw.service.action.DefaultRefreshAction;
import org.jw.service.action.DefaultRemoveProfileAction;
import org.jw.service.action.DefaultSaveAction;
import org.jw.service.action.dependency.BackupPostDependency;
import org.jw.service.action.dependency.BackupPreDependency;
import org.jw.service.action.dependency.DefaultSystemExitPreDependency;
import org.jw.service.action.dependency.DeleteContactPostDependency;
import org.jw.service.action.dependency.NewContactPostDependency;
import org.jw.service.action.dependency.PrintContactPostDependency;
import org.jw.service.action.dependency.ProfileSetPostDependency;
import org.jw.service.action.dependency.RecordNumberPreDependency;
import org.jw.service.action.dependency.RefreshContactListPostDependency;
import org.jw.service.action.dependency.RemoveProfilePreDependency;
import org.jw.service.action.dependency.SaveContactPostDependency;
import org.jw.service.action.validator.DefaultCloseActionValidator;
import org.jw.service.action.validator.DefaultRequiredFieldsSaveActionValidator;
import org.jw.service.action.validator.DefaultRequiredLocationMapValidator;
import org.jw.service.action.validator.DefaultUniqueFieldsSaveActionValidator;
import org.jw.service.builder.DefaultTaskBuilder;
import org.jw.service.dao.DataAccessObject;
import org.jw.service.entity.Contact;
import org.jw.service.entity.ContactStatus;
import org.jw.service.entity.ServiceGroup;
import org.jw.service.entity.Territory;
import org.jw.service.file.filter.FileFilterDirectory;
import org.jw.service.file.filter.FileFilterImage;
import org.jw.service.gui.component.MultipleRecordCrudPanel;
import org.jw.service.gui.focus.DefaultFocusTraversalPolicy;
import org.jw.service.list.ContactMatcher;
import org.jw.service.list.selection.listener.ContactTableSelectionListener;
import org.jw.service.listener.combobox.DefaultComboBoxModelListListener;
import org.jw.service.listener.item.DefaultServiceGroupItemListener;
import org.jw.service.listener.selection.ContactListSelectionListener;
import org.jw.service.listener.task.DefaultTaskListener;
import org.jw.service.listener.tree.selection.DefaultTreeSelectionListener;
import org.jw.service.util.UtilityDatabase;
import org.jw.service.util.UtilityDialog;
import org.jw.service.util.UtilityProperties;
import org.jw.service.util.UtilityReportPrint;
import org.jw.service.util.UtilityTable;
import org.jw.service.util.UtilityTree;


/**
 *
 * @author Wilson
 */
public final class ApplicationFrame extends javax.swing.JFrame {

    /**
     * Creates new form ApplicationFrame
     * @param em
     */
    public ApplicationFrame(EntityManager em) {        
        this.em = em;        
        this.contactDAO = DataAccessObject.create(em, Contact.class);
        this.statusDAO = DataAccessObject.create(em, ContactStatus.class);
        this.serviceGroupDAO = DataAccessObject.create(em, ServiceGroup.class);
        this.territoryDAO = DataAccessObject.create(em, Territory.class);
        initComponents();
        initMyComponents();        
        //initFocusTraversalPolicy();
    }
    
    public void initFocusTraversalPolicy(){
        DefaultFocusTraversalPolicy focusTraversalPolicy = DefaultFocusTraversalPolicy.create();
        
        focusTraversalPolicy.addComponent(this.recordNumberTextField);
        focusTraversalPolicy.addComponent(this.recordDateChooser);
        focusTraversalPolicy.addComponent(this.lastNameTextField);
        focusTraversalPolicy.addComponent(this.firstNameTextField);
        this.personalTab.setFocusTraversalPolicy(focusTraversalPolicy);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        contactList = org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.ArrayList<org.jw.service.entity.Contact>());
        statusListBean = new org.jw.service.beans.ListBean(statusDAO);
        serviceGroupListBean = new org.jw.service.beans.ListBean(serviceGroupDAO);
        defaultDateCellRenderer = new org.jw.service.table.cell.renderer.DefaultDateCellRenderer();
        documentFilterFactory = new org.jw.service.document.filter.DocumentFilterFactory();
        defaultComboBoxModel = new javax.swing.DefaultComboBoxModel();
        territoryListBean = new org.jw.service.beans.ListBean(this.territoryDAO);
        mainCommandPanel = new org.jw.service.gui.component.MainCommandPanel();
        viewModeComboBox = new javax.swing.JComboBox();
        treeScrollPane = new javax.swing.JScrollPane();
        contactTree = new javax.swing.JTree();
        tabbedPane = new javax.swing.JTabbedPane();
        personalTab = new javax.swing.JPanel();
        profilePicturePanel = new javax.swing.JPanel();
        profilePictureLabel = new javax.swing.JLabel();
        personalPanel = new javax.swing.JPanel();
        recordNumberLabel = new javax.swing.JLabel();
        recordNumberTextField = new javax.swing.JTextField();
        recordDateLabel = new javax.swing.JLabel();
        recordDateChooser = new com.toedter.calendar.JDateChooser();
        lastNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        nickNameLabel = new javax.swing.JLabel();
        nickNameTextField = new javax.swing.JTextField();
        birthdateLabel = new javax.swing.JLabel();
        birthDateChooser = new com.toedter.calendar.JDateChooser();
        sexLabel = new javax.swing.JLabel();
        sexComboBox = new javax.swing.JComboBox();
        statusLabel = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox();
        maritalStatusLabel = new javax.swing.JLabel();
        maritalStatusComboBox = new javax.swing.JComboBox();
        nationalityLabel = new javax.swing.JLabel();
        nationalityTextField = new javax.swing.JTextField();
        commandCardPanel = new javax.swing.JPanel();
        setProfilePictureCommand = new javax.swing.JButton();
        removeProfilePictureCommand = new javax.swing.JButton();
        addressTab = new javax.swing.JPanel();
        addressPanel = new javax.swing.JPanel();
        houseNumberLabel = new javax.swing.JLabel();
        houseNumberTextField = new javax.swing.JTextField();
        streetLabel = new javax.swing.JLabel();
        streetTextField = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        barangayLabel = new javax.swing.JLabel();
        barangayTextField = new javax.swing.JTextField();
        areaLabel = new javax.swing.JLabel();
        areaTextField = new javax.swing.JTextField();
        territoryLabel = new javax.swing.JLabel();
        territoryComboBox = new javax.swing.JComboBox();
        backgroundTab = new javax.swing.JPanel();
        backgroundPanel = new javax.swing.JPanel();
        personalLabel = new javax.swing.JLabel();
        personalTextField = new javax.swing.JTextField();
        familyLabel = new javax.swing.JLabel();
        familyTextField = new javax.swing.JTextField();
        workBackgroundLabel = new javax.swing.JLabel();
        workBackgroundTextField = new javax.swing.JTextField();
        guardiansNameLabel = new javax.swing.JLabel();
        guardiansNameTextField = new javax.swing.JTextField();
        fathersNameLabel = new javax.swing.JLabel();
        fathersNameTextField = new javax.swing.JTextField();
        mothersNameLabel = new javax.swing.JLabel();
        mothersNameTextField = new javax.swing.JTextField();
        religionLabel = new javax.swing.JLabel();
        religionTextField = new javax.swing.JTextField();
        foundByLabel = new javax.swing.JLabel();
        foundByTextField = new javax.swing.JTextField();
        communicationTab = new javax.swing.JPanel();
        communicationPanel = new javax.swing.JPanel();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneNumberTextField = new javax.swing.JTextField();
        mobileNumberLabel = new javax.swing.JLabel();
        mobileNumberTextField = new javax.swing.JTextField();
        emailAddressLabel = new javax.swing.JLabel();
        emailAddressTextField = new javax.swing.JTextField();
        skypeLabel = new javax.swing.JLabel();
        skypeAccountTextField = new javax.swing.JTextField();
        facebookLabel = new javax.swing.JLabel();
        facebookTextField = new javax.swing.JTextField();
        mapsTab = new javax.swing.JPanel();
        mapsPanel = new javax.swing.JPanel();
        mapsToolBar = new javax.swing.JToolBar();
        openLocationMapCommand = new javax.swing.JButton();
        openDirectionMapCommand = new javax.swing.JButton();
        historyTab = new javax.swing.JPanel();
        historyPanel = new javax.swing.JPanel();
        historyScrollPane = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        otherTab = new javax.swing.JPanel();
        otherPanel = new javax.swing.JPanel();
        printedCheckBox = new javax.swing.JCheckBox();
        currentAgeLabel = new javax.swing.JLabel();
        currentAgeTextField = new javax.swing.JTextField();
        contactsPanel = new javax.swing.JPanel();
        contactsScrollPane = new javax.swing.JScrollPane();
        contactsTable = new javax.swing.JTable();
        taskMonitorPanel = new org.jw.service.gui.component.TaskMonitorPanel();
        menuBar = new javax.swing.JMenuBar();
        systemMenu = new javax.swing.JMenu();
        optionsMenu = new javax.swing.JMenu();
        congregationMenuItem = new javax.swing.JMenuItem();
        serviceGroupsMenuItem = new javax.swing.JMenuItem();
        contactStatusMenuItem = new javax.swing.JMenuItem();
        territoryMenuItem = new javax.swing.JMenuItem();
        meetingPlacesMenuItem = new javax.swing.JMenuItem();
        callStatusMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        reportTemplatesMenuItem = new javax.swing.JMenuItem();
        queryTextMenuItem = new javax.swing.JMenuItem();
        proximityMapMenuItem = new javax.swing.JMenuItem();
        excelImportExportMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        defaultDateCellRenderer.setText("defaultDateCellRenderer1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jw/service/gui/resources/properties/dialog_titles"); // NOI18N
        setTitle(bundle.getString("main.frame.title")); // NOI18N
        setIconImages(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, serviceGroupListBean, org.jdesktop.beansbinding.ELProperty.create("${defaultComboBoxModel}"), mainCommandPanel, org.jdesktop.beansbinding.BeanProperty.create("defaultComboBoxModel"));
        bindingGroup.addBinding(binding);

        viewModeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Show All", "Show Active Only" }));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        contactTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeScrollPane.setViewportView(contactTree);

        profilePicturePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profile Picture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        profilePictureLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        profilePictureLabel.setName("Profile Picture"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.profilePicture}"), profilePictureLabel, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        binding.setSourceNullValue(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.profile.picture.blank.png"))); // NOI18N
        binding.setSourceUnreadableValue(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.profile.picture.blank.png"))); // NOI18N
        binding.setConverter(org.jw.service.beansbinding.converter.ByteToImageConverter.create(this.profilePictureLabel));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout profilePicturePanelLayout = new javax.swing.GroupLayout(profilePicturePanel);
        profilePicturePanel.setLayout(profilePicturePanelLayout);
        profilePicturePanelLayout.setHorizontalGroup(
            profilePicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profilePictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        profilePicturePanelLayout.setVerticalGroup(
            profilePicturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profilePictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        personalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        recordNumberLabel.setLabelFor(recordNumberTextField);
        recordNumberLabel.setText("Record Number:");

        recordNumberTextField.setEditable(false);
        recordNumberTextField.setColumns(3);
        recordNumberTextField.setNextFocusableComponent(recordDateChooser);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.recordNumber}"), recordNumberTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "recordNumber");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        recordDateLabel.setLabelFor(recordDateChooser);
        recordDateLabel.setText("Record Date:");

        recordDateChooser.setNextFocusableComponent(firstNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.recordDate}"), recordDateChooser, org.jdesktop.beansbinding.BeanProperty.create("date"), "recordDate");
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        lastNameLabel.setLabelFor(lastNameTextField);
        lastNameLabel.setText("Last Name:");
        lastNameLabel.setNextFocusableComponent(firstNameLabel);

        lastNameTextField.setColumns(5);
        lastNameTextField.setDocument(documentFilterFactory.getSizeFilter30());
        lastNameTextField.setNextFocusableComponent(firstNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.lastName}"), lastNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "lastName");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        lastNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextFieldActionPerformed(evt);
            }
        });

        firstNameLabel.setLabelFor(firstNameTextField);
        firstNameLabel.setText("First Name:");

        firstNameTextField.setColumns(5);
        firstNameTextField.setDocument(documentFilterFactory.getSizeFilter30());
        firstNameTextField.setNextFocusableComponent(nickNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.firstName}"), firstNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "First Name");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        nickNameLabel.setLabelFor(nickNameTextField);
        nickNameLabel.setText("Nick Name:");

        nickNameTextField.setColumns(5);
        nickNameTextField.setDocument(documentFilterFactory.getSizeFilter30());
        nickNameTextField.setNextFocusableComponent(birthDateChooser);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nickName}"), nickNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "nickName");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        birthdateLabel.setLabelFor(birthDateChooser);
        birthdateLabel.setText("Birthdate:");

        birthDateChooser.setNextFocusableComponent(sexComboBox);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.birthdate}"), birthDateChooser, org.jdesktop.beansbinding.BeanProperty.create("date"), "birthdate");
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        sexLabel.setLabelFor(sexComboBox);
        sexLabel.setText("Sex:");

        sexComboBox.setModel(new javax.swing.DefaultComboBoxModel(sexProperties.getValues().toArray()));
        sexComboBox.setNextFocusableComponent(statusComboBox);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.sex}"), sexComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "sex");
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        statusLabel.setLabelFor(statusComboBox);
        statusLabel.setText("Status:");

        statusComboBox.setNextFocusableComponent(maritalStatusComboBox);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${sortedList}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, statusListBean, eLProperty, statusComboBox);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.statusId}"), statusComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "status");
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, statusListBean, org.jdesktop.beansbinding.ELProperty.create("${defaultComboBoxModel}"), statusComboBox, org.jdesktop.beansbinding.BeanProperty.create("model"));
        bindingGroup.addBinding(binding);

        maritalStatusLabel.setLabelFor(maritalStatusComboBox);
        maritalStatusLabel.setText("Civil Status:");

        maritalStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(maritalStatusProperties.getValues().toArray()));
        maritalStatusComboBox.setNextFocusableComponent(nationalityTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.maritalStatus}"), maritalStatusComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "maritalStatus");
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        nationalityLabel.setLabelFor(nationalityTextField);
        nationalityLabel.setText("Nationality:");

        nationalityTextField.setColumns(5);
        nationalityTextField.setDocument(documentFilterFactory.getSizeFilter30());
        nationalityTextField.setNextFocusableComponent(guardiansNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nationality}"), nationalityTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "nationality");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout personalPanelLayout = new javax.swing.GroupLayout(personalPanel);
        personalPanel.setLayout(personalPanelLayout);
        personalPanelLayout.setHorizontalGroup(
            personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(maritalStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maritalStatusComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(nickNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nickNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(sexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sexComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(recordNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recordNumberTextField))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(lastNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastNameTextField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(recordDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recordDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(firstNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(firstNameTextField))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addComponent(birthdateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birthDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(personalPanelLayout.createSequentialGroup()
                        .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nationalityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusComboBox, 0, 107, Short.MAX_VALUE)
                            .addComponent(nationalityTextField))))
                .addContainerGap())
        );

        personalPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lastNameLabel, maritalStatusLabel, nickNameLabel, recordNumberLabel, sexLabel});

        personalPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {birthdateLabel, firstNameLabel, nationalityLabel, recordDateLabel, statusLabel});

        personalPanelLayout.setVerticalGroup(
            personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(recordNumberLabel)
                        .addComponent(recordNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(recordDateLabel))
                    .addComponent(recordDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nickNameLabel)
                        .addComponent(nickNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(birthdateLabel))
                    .addComponent(birthDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sexLabel)
                    .addComponent(statusLabel)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maritalStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maritalStatusLabel)
                    .addComponent(nationalityLabel)
                    .addComponent(nationalityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        commandCardPanel.setLayout(new java.awt.CardLayout());

        setProfilePictureCommand.setText("Set Picture");
        commandCardPanel.add(setProfilePictureCommand, "card2");

        removeProfilePictureCommand.setText("Remove Picture");
        removeProfilePictureCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProfilePictureCommandActionPerformed(evt);
            }
        });
        commandCardPanel.add(removeProfilePictureCommand, "card3");

        javax.swing.GroupLayout personalTabLayout = new javax.swing.GroupLayout(personalTab);
        personalTab.setLayout(personalTabLayout);
        personalTabLayout.setHorizontalGroup(
            personalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(profilePicturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(commandCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(personalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        personalTabLayout.setVerticalGroup(
            personalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(personalTabLayout.createSequentialGroup()
                        .addComponent(profilePicturePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(commandCardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(personalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Personal", personalTab);

        addressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        houseNumberLabel.setLabelFor(houseNumberTextField);
        houseNumberLabel.setText("House Number:");

        houseNumberTextField.setColumns(10);
        houseNumberTextField.setDocument(documentFilterFactory.getSizeFilter15());
        houseNumberTextField.setNextFocusableComponent(streetTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.houseNumber}"), houseNumberTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "houseNumber");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        streetLabel.setLabelFor(streetTextField);
        streetLabel.setText("Street:");

        streetTextField.setColumns(10);
        streetTextField.setDocument(documentFilterFactory.getSizeFilter200());
        streetTextField.setNextFocusableComponent(cityTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.street}"), streetTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "Street");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        cityLabel.setLabelFor(cityTextField);
        cityLabel.setText("City:");

        cityTextField.setColumns(10);
        cityTextField.setDocument(documentFilterFactory.getSizeFilter50());
        cityTextField.setNextFocusableComponent(barangayTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.city}"), cityTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "City");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        barangayLabel.setLabelFor(barangayTextField);
        barangayLabel.setText("Barangay:");

        barangayTextField.setColumns(10);
        barangayTextField.setDocument(documentFilterFactory.getSizeFilter20());
        barangayTextField.setNextFocusableComponent(areaTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.barangay}"), barangayTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "barangay");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        areaLabel.setLabelFor(areaTextField);
        areaLabel.setText("Area:");

        areaTextField.setColumns(5);
        areaTextField.setDocument(documentFilterFactory.getSizeFilter50());
        areaTextField.setNextFocusableComponent(territoryComboBox);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.area}"), areaTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "area");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        territoryLabel.setLabelFor(territoryComboBox);
        territoryLabel.setText("Territory:");

        territoryComboBox.setModel(territoryListBean.getDefaultComboBoxModel());
        territoryComboBox.setNextFocusableComponent(personalTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.territoryId}"), territoryComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout addressPanelLayout = new javax.swing.GroupLayout(addressPanel);
        addressPanel.setLayout(addressPanelLayout);
        addressPanelLayout.setHorizontalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(houseNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(houseNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(barangayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(streetLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(areaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(streetTextField)
                            .addComponent(cityTextField)
                            .addComponent(barangayTextField)
                            .addGroup(addressPanelLayout.createSequentialGroup()
                                .addComponent(areaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(territoryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(territoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        addressPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {barangayLabel, houseNumberLabel});

        addressPanelLayout.setVerticalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(houseNumberLabel)
                    .addComponent(houseNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barangayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barangayLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(areaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaLabel)
                    .addComponent(territoryLabel)
                    .addComponent(territoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addressTabLayout = new javax.swing.GroupLayout(addressTab);
        addressTab.setLayout(addressTabLayout);
        addressTabLayout.setHorizontalGroup(
            addressTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addressTabLayout.setVerticalGroup(
            addressTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Address", addressTab);

        backgroundPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Background", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        personalLabel.setLabelFor(personalTextField);
        personalLabel.setText("Personal:");

        personalTextField.setDocument(documentFilterFactory.getSizeFilter150());
        personalTextField.setNextFocusableComponent(familyTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.personalBackground}"), personalTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "personalBackground");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        familyLabel.setLabelFor(familyTextField);
        familyLabel.setText("Family:");

        familyTextField.setDocument(documentFilterFactory.getSizeFilter150());
        familyTextField.setNextFocusableComponent(workBackgroundTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.familyBackground}"), familyTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "familyBackground");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        workBackgroundLabel.setLabelFor(workBackgroundTextField);
        workBackgroundLabel.setText("Work:");

        workBackgroundTextField.setColumns(5);
        workBackgroundTextField.setDocument(documentFilterFactory.getSizeFilter150());
        workBackgroundTextField.setNextFocusableComponent(guardiansNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.workBackground}"), workBackgroundTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        guardiansNameLabel.setLabelFor(guardiansNameTextField);
        guardiansNameLabel.setText("Guardian:");

        guardiansNameTextField.setColumns(5);
        guardiansNameTextField.setDocument(documentFilterFactory.getSizeFilter50());
        guardiansNameTextField.setNextFocusableComponent(fathersNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.guardiansName}"), guardiansNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        fathersNameLabel.setLabelFor(fathersNameTextField);
        fathersNameLabel.setText("Father:");

        fathersNameTextField.setColumns(5);
        fathersNameTextField.setDocument(documentFilterFactory.getSizeFilter50());
        fathersNameTextField.setNextFocusableComponent(religionTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.fathersName}"), fathersNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        mothersNameLabel.setLabelFor(mothersNameTextField);
        mothersNameLabel.setText("Mother:");

        mothersNameTextField.setColumns(5);
        mothersNameTextField.setDocument(documentFilterFactory.getSizeFilter50());
        mothersNameTextField.setNextFocusableComponent(foundByTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.mothersName}"), mothersNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        religionLabel.setLabelFor(religionTextField);
        religionLabel.setText("Religion:");

        religionTextField.setColumns(5);
        religionTextField.setDocument(documentFilterFactory.getSizeFilter50());
        religionTextField.setNextFocusableComponent(mothersNameTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.religion}"), religionTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        foundByLabel.setLabelFor(foundByTextField);
        foundByLabel.setText("Found by:");

        foundByTextField.setColumns(5);
        foundByTextField.setDocument(documentFilterFactory.getSizeFilter50());
        foundByTextField.setNextFocusableComponent(phoneNumberTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.foundBy}"), foundByTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(personalLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(personalTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(familyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(familyTextField))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(mothersNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mothersNameTextField))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(workBackgroundLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(workBackgroundTextField))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(fathersNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fathersNameTextField)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(guardiansNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guardiansNameTextField))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(foundByLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(foundByTextField))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(religionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(religionTextField)))))
                .addContainerGap())
        );

        backgroundPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {familyLabel, fathersNameLabel, mothersNameLabel, personalLabel, workBackgroundLabel});

        backgroundPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {foundByLabel, guardiansNameLabel, religionLabel});

        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personalLabel)
                    .addComponent(personalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(familyLabel)
                    .addComponent(familyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workBackgroundLabel)
                    .addComponent(workBackgroundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardiansNameLabel)
                    .addComponent(guardiansNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fathersNameLabel)
                    .addComponent(fathersNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(religionLabel)
                    .addComponent(religionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mothersNameLabel)
                    .addComponent(mothersNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(foundByLabel)
                    .addComponent(foundByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout backgroundTabLayout = new javax.swing.GroupLayout(backgroundTab);
        backgroundTab.setLayout(backgroundTabLayout);
        backgroundTabLayout.setHorizontalGroup(
            backgroundTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        backgroundTabLayout.setVerticalGroup(
            backgroundTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Background", backgroundTab);

        communicationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Communication", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        phoneNumberLabel.setLabelFor(phoneNumberTextField);
        phoneNumberLabel.setText("Phone Number:");

        phoneNumberTextField.setDocument(documentFilterFactory.getSizeFilter50());
        phoneNumberTextField.setNextFocusableComponent(mobileNumberTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.phoneNumber}"), phoneNumberTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "phoneNumber");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        mobileNumberLabel.setLabelFor(mobileNumberTextField);
        mobileNumberLabel.setText("Mobile Number:");

        mobileNumberTextField.setDocument(documentFilterFactory.getSizeFilter50());
        mobileNumberTextField.setNextFocusableComponent(emailAddressTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.mobileNumber}"), mobileNumberTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "mobileNumber");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        emailAddressLabel.setLabelFor(emailAddressTextField);
        emailAddressLabel.setText("Email:");

        emailAddressTextField.setDocument(documentFilterFactory.getSizeFilter50());
        emailAddressTextField.setNextFocusableComponent(skypeAccountTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.emailAddress}"), emailAddressTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "emailAddress");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        skypeLabel.setLabelFor(skypeAccountTextField);
        skypeLabel.setText("Skype:");

        skypeAccountTextField.setDocument(documentFilterFactory.getSizeFilter50());
        skypeAccountTextField.setNextFocusableComponent(facebookTextField);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.skypeAccount}"), skypeAccountTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "skypeAccount");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        facebookLabel.setLabelFor(facebookTextField);
        facebookLabel.setText("Facebook:");

        facebookTextField.setDocument(documentFilterFactory.getSizeFilter50());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.facebookAccount}"), facebookTextField, org.jdesktop.beansbinding.BeanProperty.create("text"), "facebookAccount");
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout communicationPanelLayout = new javax.swing.GroupLayout(communicationPanel);
        communicationPanel.setLayout(communicationPanelLayout);
        communicationPanelLayout.setHorizontalGroup(
            communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communicationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(communicationPanelLayout.createSequentialGroup()
                        .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneNumberLabel)
                            .addComponent(mobileNumberLabel)
                            .addComponent(emailAddressLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mobileNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                            .addComponent(phoneNumberTextField)
                            .addComponent(emailAddressTextField)))
                    .addGroup(communicationPanelLayout.createSequentialGroup()
                        .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skypeLabel)
                            .addComponent(facebookLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skypeAccountTextField)
                            .addComponent(facebookTextField))))
                .addContainerGap())
        );

        communicationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {emailAddressLabel, facebookLabel, mobileNumberLabel, phoneNumberLabel, skypeLabel});

        communicationPanelLayout.setVerticalGroup(
            communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communicationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNumberLabel)
                    .addComponent(phoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileNumberLabel)
                    .addComponent(mobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailAddressLabel)
                    .addComponent(emailAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skypeLabel)
                    .addComponent(skypeAccountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(communicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facebookLabel)
                    .addComponent(facebookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout communicationTabLayout = new javax.swing.GroupLayout(communicationTab);
        communicationTab.setLayout(communicationTabLayout);
        communicationTabLayout.setHorizontalGroup(
            communicationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communicationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(communicationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        communicationTabLayout.setVerticalGroup(
            communicationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communicationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(communicationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Communication", communicationTab);

        mapsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Maps", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        mapsToolBar.setFloatable(false);
        mapsToolBar.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mapsToolBar.setRollover(true);

        openLocationMapCommand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.plot.map.png"))); // NOI18N
        openLocationMapCommand.setText("Location");
        openLocationMapCommand.setFocusable(false);
        openLocationMapCommand.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        mapsToolBar.add(openLocationMapCommand);

        openDirectionMapCommand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.direcion.png"))); // NOI18N
        openDirectionMapCommand.setText("Direction");
        openDirectionMapCommand.setFocusable(false);
        openDirectionMapCommand.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        mapsToolBar.add(openDirectionMapCommand);

        javax.swing.GroupLayout mapsPanelLayout = new javax.swing.GroupLayout(mapsPanel);
        mapsPanel.setLayout(mapsPanelLayout);
        mapsPanelLayout.setHorizontalGroup(
            mapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapsToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(403, Short.MAX_VALUE))
        );
        mapsPanelLayout.setVerticalGroup(
            mapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapsToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mapsTabLayout = new javax.swing.GroupLayout(mapsTab);
        mapsTab.setLayout(mapsTabLayout);
        mapsTabLayout.setHorizontalGroup(
            mapsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mapsTabLayout.setVerticalGroup(
            mapsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Maps", mapsTab);

        historyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "History", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        historyTextArea.setColumns(20);
        historyTextArea.setDocument(documentFilterFactory.getSizeFilter200());
        historyTextArea.setLineWrap(true);
        historyTextArea.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.history}"), historyTextArea, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("");
        bindingGroup.addBinding(binding);

        historyScrollPane.setViewportView(historyTextArea);

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout historyTabLayout = new javax.swing.GroupLayout(historyTab);
        historyTab.setLayout(historyTabLayout);
        historyTabLayout.setHorizontalGroup(
            historyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyTabLayout.setVerticalGroup(
            historyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("History", historyTab);

        otherPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        printedCheckBox.setText("Printed");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.printed}"), printedCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        binding.setSourceUnreadableValue(false);
        bindingGroup.addBinding(binding);

        currentAgeLabel.setText("Current Age:");

        currentAgeTextField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.age}"), currentAgeTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("null");
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout otherPanelLayout = new javax.swing.GroupLayout(otherPanel);
        otherPanel.setLayout(otherPanelLayout);
        otherPanelLayout.setHorizontalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(otherPanelLayout.createSequentialGroup()
                        .addComponent(currentAgeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(printedCheckBox))
                .addContainerGap(282, Short.MAX_VALUE))
        );

        otherPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {currentAgeLabel, printedCheckBox});

        otherPanelLayout.setVerticalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentAgeLabel)
                    .addComponent(currentAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printedCheckBox)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout otherTabLayout = new javax.swing.GroupLayout(otherTab);
        otherTab.setLayout(otherTabLayout);
        otherTabLayout.setHorizontalGroup(
            otherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(otherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        otherTabLayout.setVerticalGroup(
            otherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(otherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Other", otherTab);

        contactsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contacts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        contactsTable.setAutoCreateRowSorter(true);
        contactsTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        contactsTable.setRowHeight(18);
        contactsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contactsTable.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contactList, contactsTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${saveState}"));
        columnBinding.setColumnName("");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${recordNumber}"));
        columnBinding.setColumnName("Record #");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${lastName}"));
        columnBinding.setColumnName("Last Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${firstName}"));
        columnBinding.setColumnName("First Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${birthdate}"));
        columnBinding.setColumnName("Birthdate");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sex}"));
        columnBinding.setColumnName("Sex");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${maritalStatus}"));
        columnBinding.setColumnName("Civil Status");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${statusId}"));
        columnBinding.setColumnName("Status");
        columnBinding.setColumnClass(org.jw.service.entity.ContactStatus.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${printed}"));
        columnBinding.setColumnName("Printed");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hasMap}"));
        columnBinding.setColumnName("Has Map");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        contactsScrollPane.setViewportView(contactsTable);
        if (contactsTable.getColumnModel().getColumnCount() > 0) {
            contactsTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            contactsTable.getColumnModel().getColumn(0).setCellRenderer(org.jw.service.table.cell.renderer.DefaultStateCellRenderer.create());
            contactsTable.getColumnModel().getColumn(4).setCellRenderer(defaultDateCellRenderer);
            contactsTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        javax.swing.GroupLayout contactsPanelLayout = new javax.swing.GroupLayout(contactsPanel);
        contactsPanel.setLayout(contactsPanelLayout);
        contactsPanelLayout.setHorizontalGroup(
            contactsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contactsScrollPane)
                .addContainerGap())
        );
        contactsPanelLayout.setVerticalGroup(
            contactsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contactsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );

        systemMenu.setText("System");
        menuBar.add(systemMenu);

        optionsMenu.setText("Options");

        congregationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.congregation.png"))); // NOI18N
        congregationMenuItem.setText("Congregation");
        optionsMenu.add(congregationMenuItem);

        serviceGroupsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.service.groups.png"))); // NOI18N
        serviceGroupsMenuItem.setText("Service Groups");
        optionsMenu.add(serviceGroupsMenuItem);

        contactStatusMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.status.icon.png"))); // NOI18N
        contactStatusMenuItem.setText("Contact Status");
        optionsMenu.add(contactStatusMenuItem);

        territoryMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/defaul.territory.png"))); // NOI18N
        territoryMenuItem.setText("Territories");
        optionsMenu.add(territoryMenuItem);

        meetingPlacesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.fsg.meeting.place.png"))); // NOI18N
        meetingPlacesMenuItem.setText("Meeting Places");
        optionsMenu.add(meetingPlacesMenuItem);

        callStatusMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.call.status.icon.png"))); // NOI18N
        callStatusMenuItem.setText("Call Status");
        optionsMenu.add(callStatusMenuItem);

        menuBar.add(optionsMenu);

        toolsMenu.setText("Tools");

        reportTemplatesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.report.templates.png"))); // NOI18N
        reportTemplatesMenuItem.setText("Reports Templates");
        toolsMenu.add(reportTemplatesMenuItem);

        queryTextMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.data.query.icon.png"))); // NOI18N
        queryTextMenuItem.setText("Query");
        toolsMenu.add(queryTextMenuItem);

        proximityMapMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.proximity.map.png"))); // NOI18N
        proximityMapMenuItem.setText("Proximity Map");
        toolsMenu.add(proximityMapMenuItem);

        excelImportExportMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jw/service/gui/resources/icon/default.excel.icon.png"))); // NOI18N
        excelImportExportMenuItem.setText("Excel Import/Export");
        toolsMenu.add(excelImportExportMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText("Help");
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainCommandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
            .addComponent(taskMonitorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(treeScrollPane)
                    .addComponent(viewModeComboBox, 0, 223, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbedPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainCommandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(treeScrollPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskMonitorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lastNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextFieldActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        //this.mainCommandPanel.getServiceGroupComboBox().addItemListener(new org.jw.service.listener.item.DefaultServiceGroupItemListener(this));
    }//GEN-LAST:event_formWindowActivated

    private void removeProfilePictureCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProfilePictureCommandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeProfilePictureCommandActionPerformed

    private void initMyComponents(){
        this.mainCommandPanel.getServiceGroupComboBox().setSelectedIndex(-1);
        sgListListener = DefaultComboBoxModelListListener.create(this.mainCommandPanel.getServiceGroupComboBox());
        statusListListener = DefaultComboBoxModelListListener.create(this.statusComboBox);
        territoryListListener = DefaultComboBoxModelListListener.create(this.territoryComboBox);
        serviceGroupItemListener = new DefaultServiceGroupItemListener(this);
        
        treeConstructListener = taskMonitorPanel.createDefaultTaskListener(taskMessageProperties.getProperty("tree.construct.start.message"),taskMessageProperties.getProperty("tree.construct.done.message"));
        utilTree = UtilityTree.create(contactTree, serviceGroupDAO, treeConstructListener);        
        utilTable = UtilityTable.create(contactsTable, contactList);
        utilDB = UtilityDatabase.create(em);
        utilPrint = UtilityReportPrint.create(this, em, utilDB, this.taskMonitorPanel.createDefaultTaskListener("", ""));
        utilDialog = UtilityDialog.create(this, true, em, utilTree, utilTable, utilPrint, contactList);
        utilDialog.addComboBoxModelListListener("service.group.model.list.listener", sgListListener);
        utilDialog.addComboBoxModelListListener("status.model.list.listener", statusListListener);
        utilDialog.addComboBoxModelListListener("territory.model.list.listener", territoryListListener);
        
        openServiceGroupAction = new DefaultOpenAction(serviceGroupsMenuItem, UtilityDialog.SERVICE_GROUP , utilDialog, null);        
        openContactStatusAction = new DefaultOpenAction(contactStatusMenuItem, UtilityDialog.CONTACT_STATUS, utilDialog, null);        
        openLocationMapAction = new DefaultOpenAction(openLocationMapCommand, UtilityDialog.LOCATION_MAP, utilDialog, null);        
        openDirectionMapAction = new DefaultOpenAction(openDirectionMapCommand, UtilityDialog.DIRECTION_MAP, utilDialog, null);        
        openContactCallsAction = new DefaultOpenAction(this.mainCommandPanel.getContactCallsCommand(), UtilityDialog.CONTACT_CALLS, utilDialog, null);        
        openReportTemplatesAction = new DefaultOpenAction(this.reportTemplatesMenuItem, UtilityDialog.APPS_REPORT_TEMPLATE, utilDialog, null);        
        openReportPrintAction = new DefaultOpenAction(this.mainCommandPanel.getReportsCommand(), UtilityDialog.REPORT_PRINT, utilDialog, null);        
        openTerritoryAction = new DefaultOpenAction(this.territoryMenuItem, UtilityDialog.TERRITORY, utilDialog, null);
        openCongregationAction = new DefaultOpenAction(this.congregationMenuItem, UtilityDialog.CONGREGATION, utilDialog, null);
        openMeetingPlaceAction = new DefaultOpenAction(this.meetingPlacesMenuItem, UtilityDialog.MEETING_PLACE, utilDialog, null);        
        openProximityMapAction = new DefaultOpenAction(this.proximityMapMenuItem, UtilityDialog.PROXIMITY_MAP, utilDialog, null);
        openContactSearchAction = new DefaultOpenAction(this.mainCommandPanel.getSearchCommand(), UtilityDialog.CONTACT_SEARCH, utilDialog, null);
        openStatisticsAction = new DefaultOpenAction(this.mainCommandPanel.getStatisticsCommand() , UtilityDialog.STATISTICS, utilDialog, null);
        openCallStatusAction = new DefaultOpenAction(this.callStatusMenuItem, UtilityDialog.CALL_STATUS, utilDialog, null);
        openQueryTextAction = new DefaultOpenAction(this.queryTextMenuItem, UtilityDialog.QUERY_TEXT, utilDialog, null);
        this.mainCommandPanel.getServiceGroupComboBox().addItemListener(serviceGroupItemListener);
        
        fcOpenAction = new DefaultFileChooserAction(this.setProfilePictureCommand, this, FileFilterImage.create(), "Open", JFileChooser.FILES_ONLY, null);        
        dirOpenAction = new DefaultFileChooserAction(this.mainCommandPanel.getBackupCommand(), this, FileFilterDirectory.create(), "Save", JFileChooser.DIRECTORIES_ONLY, null);        
        contactPrintAction = new DefaultContactPrintAction(this.mainCommandPanel.getPrintCommand(), em);        
        removeProfileAction = new DefaultRemoveProfileAction(this.removeProfilePictureCommand, utilTable);
        
        openContactCallsAction.setEnabled(false);
        contactPrintAction.setEnabled(false);       
        openLocationMapAction.setEnabled(false);
        openDirectionMapAction.setEnabled(false);
        buildCrudTask();
        addIconPropertyChangeListener();        
        setCustomKeyBinders();        
        
        ContactTableSelectionListener selectionListener;
        selectionListener = new ContactTableSelectionListener(utilTable, this.territoryComboBox);
        //contactsTable.getSelectionModel().addListSelectionListener(selectionListener);
    }
    
    private void buildCrudTask(){                
        contactObservableList = (ObservableList) contactList;        
        contactList.addAll(contactDAO.readAll());
        DefaultTaskBuilder<Contact> taskBuilder = new DefaultTaskBuilder<>();
        taskBuilder.setEntityName("contact");
        taskBuilder.setProperties(taskMessageProperties);        
        surrogateCrudPanel = new MultipleRecordCrudPanel();
        surrogateCrudPanel.setNewCommand(this.mainCommandPanel.getNewCommand());
        surrogateCrudPanel.setRefreshCommand(this.mainCommandPanel.getRefreshCommand());
        surrogateCrudPanel.setDeleteCommand(this.mainCommandPanel.getDeleteCommand());
        surrogateCrudPanel.setSaveCommand(this.mainCommandPanel.getSaveCommand());                
        surrogateCrudPanel.setCloseCommand(this.mainCommandPanel.getExitCommand());                
        taskBuilder.setMultipleRecordCrudPanel(surrogateCrudPanel);
        taskBuilder.setTaskMonitorPanel(taskMonitorPanel);
        taskBuilder.setCloseAction(closeAction);
        taskBuilder.setNewAction(newAction);
        taskBuilder.setDeleteAction(deleteAction);
        taskBuilder.setRefreshAction(refreshAction);
        taskBuilder.setSaveAction(saveAction);        
        taskBuilder.setList(contactList);
        taskBuilder.setTable(contactsTable);
        taskBuilder.setWindow(this);
        taskBuilder.setDao(contactDAO);
        taskBuilder.setQuery(em.createNamedQuery("Contact.findAll", Contact.class));
        taskBuilder.buildDefaultTasks();
        
        treeSelectionListener = new DefaultTreeSelectionListener(this.utilTree, this.utilTable);
        contactTree.addTreeSelectionListener(treeSelectionListener);
        
        //ContactObservableListListener contactObservableListListener = ContactObservableListListener.create();
        //contactObservableListListener.addAction(openContactCallsAction);
        //contactObservableListListener.addAction(contactPrintAction);
        //contactObservableListListener.addAction(openLocationMapAction);
        //contactObservableListListener.addAction(openDirectionMapAction);
        ContactListSelectionListener contactListSelectionListener = ContactListSelectionListener.create();
        contactListSelectionListener.addAction(openContactCallsAction);
        contactListSelectionListener.addAction(contactPrintAction);
        contactListSelectionListener.addAction(openLocationMapAction);
        contactListSelectionListener.addAction(openDirectionMapAction);                
        //contactObservableList.addObservableListListener(contactObservableListListener);
        contactsTable.getSelectionModel().addListSelectionListener(contactListSelectionListener);
        
        
        taskBuilder.getListListener().addDisableAdded(openContactCallsAction);
        taskBuilder.getListListener().addDisableAdded(contactPrintAction);
        taskBuilder.getListListener().addDisableAdded(openLocationMapAction);
        taskBuilder.getListListener().addDisableAdded(openDirectionMapAction);
        taskBuilder.getListListener().addDisableRemoved(openContactCallsAction);
        taskBuilder.getListListener().addDisableRemoved(contactPrintAction);
        taskBuilder.getListListener().addDisableRemoved(openLocationMapAction);
        taskBuilder.getListListener().addDisableRemoved(openDirectionMapAction);
        
        setActionDependencies(taskBuilder, utilTable);
        setActionValidators(taskBuilder, utilTable);
    }
    
    private void setActionDependencies(DefaultTaskBuilder taskBuilder, UtilityTable<Contact> utilTable){
        // Set Dependencies
        RecordNumberPreDependency recordNumberPreDependency = new RecordNumberPreDependency(this, serviceGroupDAO, this.mainCommandPanel.getServiceGroupComboBox());        
        NewContactPostDependency recordNumberPostDependency = new NewContactPostDependency(contactDAO, serviceGroupDAO, this.mainCommandPanel.getServiceGroupComboBox(), utilTree, this.tabbedPane, this.lastNameTextField);                
        ProfileSetPostDependency profileSetPostDependency = new ProfileSetPostDependency(this.profilePictureLabel);
        RefreshContactListPostDependency refreshContactListPostDependency = new RefreshContactListPostDependency(utilTree);
        DeleteContactPostDependency deleteContactPostDependency = new DeleteContactPostDependency(utilTree);
        SaveContactPostDependency saveContactPostDependency = new SaveContactPostDependency(utilTree);
        BackupPreDependency backupPreDependency = new BackupPreDependency(this);
        BackupPostDependency backupPostDependency = new BackupPostDependency(this, this.utilDB);
        PrintContactPostDependency printContactPostDependency = new PrintContactPostDependency(this, this.utilTable, this.utilPrint);
        RemoveProfilePreDependency removeProfileDependency = new RemoveProfilePreDependency(this);
        
        taskBuilder.getNewAction().addPreActionCommands("recordNumberPreDependency",recordNumberPreDependency);        
        taskBuilder.getNewAction().addPostActionCommands("recordNumberPostDependency",recordNumberPostDependency);        
        taskBuilder.getCloseAction().addPreActionCommands("systemExitPreDependency", new DefaultSystemExitPreDependency(this, em));

        
        //taskBuilder.getRefreshAction().addPostActionCommands("refreshContactListPostDependency", refreshContactListPostDependency);
        taskBuilder.getDeleteAction().addPostActionCommands("deleteContactPostDependency", deleteContactPostDependency);
        taskBuilder.getSaveAction().addPostActionCommands("saveContactPostDependency", saveContactPostDependency);
        this.fcOpenAction.addPostActionCommands("profileSetPostDependency", profileSetPostDependency);        
        this.dirOpenAction.addPreActionCommands("backupPreDependency", backupPreDependency);
        this.dirOpenAction.addPostActionCommands("backupPostDependency", backupPostDependency);
        this.contactPrintAction.addPostActionCommands("printContactPostDependency", printContactPostDependency);
        this.removeProfileAction.addPreActionCommands("removeProfileDependency", removeProfileDependency);
    }
    
    private void setActionValidators(DefaultTaskBuilder taskBuilder, UtilityTable<Contact> utilTable){
        // Create Matcher
        ContactMatcher matcher = new ContactMatcher();
        
        // Create Validators
        DefaultUniqueFieldsSaveActionValidator<Contact> uniqueFieldValidator = new DefaultUniqueFieldsSaveActionValidator<>(this, contactList, utilTable, matcher, "Contact");
        DefaultRequiredFieldsSaveActionValidator<Contact> requiredFieldValidator = new DefaultRequiredFieldsSaveActionValidator<>(this, utilTable, "Contact");
        DefaultCloseActionValidator closeActionValidator = new DefaultCloseActionValidator(this, utilTable);
        DefaultRequiredLocationMapValidator locationMapValidator = new DefaultRequiredLocationMapValidator(this, utilTable, contactDAO);
        
        taskBuilder.getCloseAction().addActionValidator(closeActionValidator);
        taskBuilder.getSaveAction().addActionValidator(uniqueFieldValidator);        
        taskBuilder.getSaveAction().addActionValidator(requiredFieldValidator);
        this.openDirectionMapAction.addActionValidator(locationMapValidator);
    }
    
    private void setCustomKeyBinders(){
        KeyStroke enterKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        KeyStroke controlPKey = KeyStroke.getKeyStroke(KeyEvent.VK_P, KeyEvent.CTRL_DOWN_MASK);
        KeyStroke controlFKey = KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);
        
        this.contactsTable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enterKey, "CONTROL_ENTER");
        this.contactsTable.getActionMap().put("CONTROL_ENTER", openContactCallsAction);
        this.tabbedPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enterKey, "CONTROL_ENTER");
        this.tabbedPane.getActionMap().put("CONTROL_ENTER", openContactCallsAction);
        this.contactTree.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enterKey, "CONTROL_ENTER");
        this.contactTree.getActionMap().put("CONTROL_ENTER", openContactCallsAction);
        
        this.contactsTable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(controlPKey, "CONTROL_P");
        this.contactsTable.getActionMap().put("CONTROL_P", contactPrintAction);
        this.tabbedPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(controlPKey, "CONTROL_P");
        this.tabbedPane.getActionMap().put("CONTROL_P", contactPrintAction);
        
        this.mainCommandPanel.getSearchCommand().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(controlFKey, "CONTROL_F");
        this.mainCommandPanel.getSearchCommand().getActionMap().put("CONTROL_F", this.openContactSearchAction);
    }
    
    private void addIconPropertyChangeListener(){
        this.profilePictureLabel.addPropertyChangeListener("icon", 
            new PropertyChangeListener(){
                @Override
                public void propertyChange(PropertyChangeEvent pce) {
                    if(pce.getNewValue() instanceof javax.swing.ImageIcon){
                        CardLayout layout = (CardLayout)commandCardPanel.getLayout();
                        javax.swing.ImageIcon icon = (javax.swing.ImageIcon) pce.getNewValue();
                        if(icon.toString().contains("default.profile.picture.blank.png")){
                            layout.show(commandCardPanel, "card2");
                        } else {
                            layout.show(commandCardPanel, "card3");
                        }
                    } 
                }        
            }
        );
    }
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addressPanel;
    private javax.swing.JPanel addressTab;
    private javax.swing.JLabel areaLabel;
    private javax.swing.JTextField areaTextField;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JPanel backgroundTab;
    private javax.swing.JLabel barangayLabel;
    private javax.swing.JTextField barangayTextField;
    private com.toedter.calendar.JDateChooser birthDateChooser;
    private javax.swing.JLabel birthdateLabel;
    private javax.swing.JMenuItem callStatusMenuItem;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JPanel commandCardPanel;
    private javax.swing.JPanel communicationPanel;
    private javax.swing.JPanel communicationTab;
    private javax.swing.JMenuItem congregationMenuItem;
    private java.util.List<org.jw.service.entity.Contact> contactList;
    private javax.swing.JMenuItem contactStatusMenuItem;
    private javax.swing.JTree contactTree;
    private javax.swing.JPanel contactsPanel;
    private javax.swing.JScrollPane contactsScrollPane;
    private javax.swing.JTable contactsTable;
    private javax.swing.JLabel currentAgeLabel;
    private javax.swing.JTextField currentAgeTextField;
    private javax.swing.DefaultComboBoxModel defaultComboBoxModel;
    private org.jw.service.table.cell.renderer.DefaultDateCellRenderer defaultDateCellRenderer;
    private org.jw.service.document.filter.DocumentFilterFactory documentFilterFactory;
    private javax.swing.JLabel emailAddressLabel;
    private javax.swing.JTextField emailAddressTextField;
    private javax.swing.JMenuItem excelImportExportMenuItem;
    private javax.swing.JLabel facebookLabel;
    private javax.swing.JTextField facebookTextField;
    private javax.swing.JLabel familyLabel;
    private javax.swing.JTextField familyTextField;
    private javax.swing.JLabel fathersNameLabel;
    private javax.swing.JTextField fathersNameTextField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel foundByLabel;
    private javax.swing.JTextField foundByTextField;
    private javax.swing.JLabel guardiansNameLabel;
    private javax.swing.JTextField guardiansNameTextField;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JScrollPane historyScrollPane;
    private javax.swing.JPanel historyTab;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JLabel houseNumberLabel;
    private javax.swing.JTextField houseNumberTextField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private org.jw.service.gui.component.MainCommandPanel mainCommandPanel;
    private javax.swing.JPanel mapsPanel;
    private javax.swing.JPanel mapsTab;
    private javax.swing.JToolBar mapsToolBar;
    private javax.swing.JComboBox maritalStatusComboBox;
    private javax.swing.JLabel maritalStatusLabel;
    private javax.swing.JMenuItem meetingPlacesMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel mobileNumberLabel;
    private javax.swing.JTextField mobileNumberTextField;
    private javax.swing.JLabel mothersNameLabel;
    private javax.swing.JTextField mothersNameTextField;
    private javax.swing.JLabel nationalityLabel;
    private javax.swing.JTextField nationalityTextField;
    private javax.swing.JLabel nickNameLabel;
    private javax.swing.JTextField nickNameTextField;
    private javax.swing.JButton openDirectionMapCommand;
    private javax.swing.JButton openLocationMapCommand;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JPanel otherPanel;
    private javax.swing.JPanel otherTab;
    private javax.swing.JLabel personalLabel;
    private javax.swing.JPanel personalPanel;
    private javax.swing.JPanel personalTab;
    private javax.swing.JTextField personalTextField;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JCheckBox printedCheckBox;
    private javax.swing.JLabel profilePictureLabel;
    private javax.swing.JPanel profilePicturePanel;
    private javax.swing.JMenuItem proximityMapMenuItem;
    private javax.swing.JMenuItem queryTextMenuItem;
    private com.toedter.calendar.JDateChooser recordDateChooser;
    private javax.swing.JLabel recordDateLabel;
    private javax.swing.JLabel recordNumberLabel;
    private javax.swing.JTextField recordNumberTextField;
    private javax.swing.JLabel religionLabel;
    private javax.swing.JTextField religionTextField;
    private javax.swing.JButton removeProfilePictureCommand;
    private javax.swing.JMenuItem reportTemplatesMenuItem;
    private org.jw.service.beans.ListBean serviceGroupListBean;
    private javax.swing.JMenuItem serviceGroupsMenuItem;
    private javax.swing.JButton setProfilePictureCommand;
    private javax.swing.JComboBox sexComboBox;
    private javax.swing.JLabel sexLabel;
    private javax.swing.JTextField skypeAccountTextField;
    private javax.swing.JLabel skypeLabel;
    private javax.swing.JComboBox statusComboBox;
    private javax.swing.JLabel statusLabel;
    private org.jw.service.beans.ListBean statusListBean;
    private javax.swing.JLabel streetLabel;
    private javax.swing.JTextField streetTextField;
    private javax.swing.JMenu systemMenu;
    private javax.swing.JTabbedPane tabbedPane;
    private org.jw.service.gui.component.TaskMonitorPanel taskMonitorPanel;
    private javax.swing.JComboBox territoryComboBox;
    private javax.swing.JLabel territoryLabel;
    private org.jw.service.beans.ListBean territoryListBean;
    private javax.swing.JMenuItem territoryMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JComboBox viewModeComboBox;
    private javax.swing.JLabel workBackgroundLabel;
    private javax.swing.JTextField workBackgroundTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    UtilityProperties maritalStatusProperties = UtilityProperties.create(UtilityProperties.MARITAL_STATUS_PROPERTIES);
    UtilityProperties sexProperties = UtilityProperties.create(UtilityProperties.SEX_PROPERTIES);
    DefaultComboBoxModelListListener<ServiceGroup> sgListListener;
    DefaultComboBoxModelListListener<ContactStatus> statusListListener;    
    DefaultComboBoxModelListListener<Territory> territoryListListener;    
    CongregationDialog congregationDialog;
    MeetingPlaceDialog meetingPlaceDialog;
    ProximityMapDialog proximityMapDialog;
    DefaultOpenAction openServiceGroupAction;
    DefaultOpenAction openContactStatusAction;
    DefaultOpenAction openLocationMapAction;    
    DefaultOpenAction openDirectionMapAction;
    DefaultOpenAction openContactCallsAction;
    DefaultOpenAction openReportTemplatesAction;
    DefaultOpenAction openReportPrintAction;
    DefaultOpenAction openTerritoryAction;
    DefaultOpenAction openCongregationAction;
    DefaultOpenAction openMeetingPlaceAction;
    DefaultOpenAction openProximityMapAction;
    DefaultOpenAction openContactSearchAction;
    DefaultOpenAction openStatisticsAction;
    DefaultOpenAction openCallStatusAction;
    DefaultOpenAction openQueryTextAction;
    DefaultContactPrintAction contactPrintAction;
    DataAccessObject<Contact> contactDAO;
    DataAccessObject<ContactStatus> statusDAO;
    DataAccessObject<ServiceGroup> serviceGroupDAO;
    DataAccessObject<Territory> territoryDAO;
    EntityManager em;
    
    
    // Create, Read, Update & Delete Task Components;
    MultipleRecordCrudPanel surrogateCrudPanel;
    UtilityProperties taskMessageProperties = UtilityProperties.create(UtilityProperties.TASK_MESSAGE_PROPERTIES);            
    UtilityTree utilTree;
    UtilityTable utilTable;    
    UtilityReportPrint utilPrint;
    UtilityDatabase utilDB;
    UtilityDialog utilDialog;
    DefaultCloseAction<Contact> closeAction;
    DefaultNewAction<Contact> newAction;
    DefaultDeleteAction<Contact> deleteAction;
    DefaultRefreshAction<Contact> refreshAction;
    DefaultSaveAction<Contact> saveAction;         
    DefaultRemoveProfileAction removeProfileAction;
    DefaultFileChooserAction fcOpenAction;
    DefaultFileChooserAction dirOpenAction;
    ObservableList contactObservableList;
    DefaultTaskListener treeConstructListener;
    DefaultTreeSelectionListener treeSelectionListener;
    DefaultServiceGroupItemListener serviceGroupItemListener;
}
